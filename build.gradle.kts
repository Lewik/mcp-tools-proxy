import java.io.ByteArrayOutputStream

plugins {
    kotlin("multiplatform") version "2.0.0-RC3"
    kotlin("plugin.serialization") version "2.0.0-RC3"
    application
    id("com.github.johnrengelman.shadow") version "8.1.1"
}

group = "dev.lewik.mcptools"

// also update version in jbang-catalog.json
version = "0.1.4"

repositories {
    mavenCentral()
    maven { url = uri("https://oss.sonatype.org/content/repositories/snapshots") }
}

kotlin {
    jvmToolchain(17)

    jvm {
        withJava()
        testRuns.named("test") {
            executionTask.configure {
                useJUnitPlatform()
            }
        }
    }
//
//    js(IR) {
//        moduleName = "mcp-tools-proxy"
//        binaries.executable()
//        nodejs {
//            useCommonJs()
//        }
//    }
//
//    macosArm64 {
//        binaries {
//            executable {
//                entryPoint = "main"
//            }
//        }
//    }
//
//    macosX64 {
//        binaries {
//            executable {
//                entryPoint = "main"
//            }
//        }
//    }

    sourceSets {
        val commonMain by getting {
            dependencies {
                implementation("io.modelcontextprotocol:kotlin-sdk:0.4.0")
                implementation("org.jetbrains.kotlinx:kotlinx-serialization-core:1.7.3")
                implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.7.3")
                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3")
                implementation("io.github.oshai:kotlin-logging:5.1.0")
            }
        }

        val commonTest by getting {
            dependencies {
                implementation(kotlin("test"))
                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3")
            }
        }

        val jvmMain by getting {
            dependencies {
                implementation("ch.qos.logback:logback-classic:1.4.7")
            }
        }

        val jvmTest by getting {
            dependencies {
                implementation("io.mockk:mockk:1.13.8")
                implementation("io.kotest:kotest-runner-junit5:5.8.0")
                implementation("io.kotest:kotest-assertions-core:5.8.0")
                implementation("org.junit.jupiter:junit-jupiter-api:5.10.1")
                implementation("org.junit.jupiter:junit-jupiter-engine:5.10.1")
            }
        }
//
//        val jsMain by getting {
//            dependencies {
//                implementation(npm("shebang-runtime", "^1.0.0"))
//            }
//        }
//
//        val nativeMain by creating {
//            dependsOn(commonMain)
//        }
//
//        val macosArm64Main by getting {
//            dependsOn(nativeMain)
//        }
//
//        val macosX64Main by getting {
//            dependsOn(nativeMain)
//        }
    }
}

application {
    mainClass.set("dev.lewik.mcptools.proxy.JvmMainKt")
}

tasks {
    shadowJar {
        archiveBaseName.set("mcp-tools-proxy")
        archiveClassifier.set("")
        archiveVersion.set(project.version.toString())
        mergeServiceFiles()
    }
}

tasks.named("build") {
    dependsOn(tasks.shadowJar)
}

tasks.register("checkReleaseReady") {
    doLast {
        // check git status clean
        exec {
            commandLine("git", "diff", "--quiet")
        }
        exec {
            commandLine("git", "diff", "--cached", "--quiet")
        }

        // check everything is pushed
        val revsAhead = ByteArrayOutputStream()
        exec {
            commandLine("git", "rev-list", "--count", "@{u}..HEAD")
            standardOutput = revsAhead
        }
        if (revsAhead.toString().trim() != "0") {
            throw GradleException("You have local commits that are not pushed to origin.")
        }

        // check jbang-catalog.json contains a correct version
        val catalogFile = file("jbang-catalog.json")
        val expectedScriptRef =
            "https://github.com/Lewik/mcp-tools-proxy/releases/download/v$version/mcp-tools-proxy.jar"
        val content = catalogFile.readText()
        if (!content.contains("\"script-ref\": \"$expectedScriptRef\"")) {
            throw GradleException("jbang-catalog.json does not contain exact script-ref: $expectedScriptRef")
        }
    }
}

tasks.register<Exec>("githubRelease") {
    dependsOn("checkReleaseReady")
    dependsOn("releaseJar")

    doFirst {
        exec {
            commandLine("git", "tag", "v${project.version}")
        }
        exec {
            commandLine("git", "push", "origin", "v${project.version}")
        }
    }

    commandLine(
        "gh", "release", "create",
        "v${project.version}",
        "mcp-tools-proxy.jar",
        "--title", "MCP Tools Proxy v${project.version}",
        "--notes", "Autogenerated release",
        "--latest"
    )
}

tasks.register<Copy>("releaseJar") {
    dependsOn(tasks.shadowJar)
    from(tasks.shadowJar.get().archiveFile)
    into(".")
    rename { "mcp-tools-proxy.jar" }
}
